{
  "hash": "d061a2815a8bdac5b0f81177ebf8f61e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Leitura de arquivos Illumina com snpStats\"\nauthor:\n  - name: Paulo Barros\n    orcid: 0000-0001-9839-0796\n    email: pbarrosbio@gmail.com\n    affiliations:\n      - name: PPZ - UESB - GACOM\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n\n\n\n## Arquivos _Final Report_ e de Mapa\n\nNesta prática vamos trabalhar com dados de sequencias de um chip comercial de\ngalinhas da _Illumina_. Um arquivo **_Final Report_** é um arquivo de texto\ngerado a partir do Genome Studio contendo as informações de genótipos dos\nindivíduos.\n\nO _Final Report_ pode conter diversos campos com informações sobre a genotipagem,\naqui vamos cobrir alguns mais importantes:\n\n| Campo | Descrição |\n|:-------|:-----------|\n|Sample Name | Nome da amostra  |\n|SNP Name | Identificador do SNP |\n|Allele1 Top <br> Allele2 Top| Alelos 1 e 2 em nucleotideos correspondentes aos Alelos A e B, reportados na fita Top|\n|Sample ID| Identificador da Amostra|\n|GC Score| Medida de qualidade calculada para cada genótipo, varia de 0 a 1|\n|Allele1 Forward <br> Allele2 Forward| Alelos 1 e 2 em nucleotideos correspondentes aos Alelos A e B, reportados na fita Forward|\n|Allele1 AB <br> Allele2 AB| Alelos 1 e 2 em genótipos AB|\n\n: Campos de um _Final Report_ {.striped .hover}\n\nPara consultar todos os campos disponíveis no _Final Report_ você pode visitar o\n[site da Illumina.](https://knowledge.illumina.com/microarray/general/microarray-general-reference_material-list/000002861){target=\"_blank\"}\n\n### Explorando um _Final Report_\n\nAbaixo você pode ver algumas linhas iniciais de um dos arquivos _Final Report_ que\nserão trabalhos nesta prática. \n\n```\n[Header]                                                    # <1>\nGSGT Version\t2.0.5\nProcessing Date\t10/19/2020 12:00 PM\nContent\t\tChicken_50K_CobbCons_15000986_A.bpm\nNum SNPs\t57636\nTotal SNPs\t57636\nNum Samples\t192\nTotal Samples\t192\nFile \t1 of 192\n[Data]                                                      # <2>\nSNP Name\tSample ID\tAllele1 - AB\tAllele2 - AB\tGC Score\n10080_COIII\t203900190022_R01C01\tB\tB\t0.6976\n10668_COIII\t203900190022_R01C01\tB\tB\t0.7118\n12187_ND4\t203900190022_R01C01\tB\tB\t0.6915\n15466_CYTB_MT\t203900190022_R01C01\tB\tB\t0.3856\n16262_ND6\t203900190022_R01C01\tB\tB\t0.8686\n16370_ND6\t203900190022_R01C01\tB\tB\t0.8878\n5831_ND2_MT\t203900190022_R01C01\tA\tA\t0.7214\n\n```\n1. `[Header]`: As primeiras linhas de um _Final Report_ nos trazem informações\nsobre o processo de genotipagem. Nesta seção podemos encontrar o número de SNPs,\nde amostras, e se o arquivo é um arquivo único ou individual (um _Final Report_\npor amostra).\n\n2. `[Data]`: Na seção data inicia o arquivo de fato, é possível então identificar\nquais colunas estão disponíveis.\n\n::: {.callout-note}\n# Atenção!\n\nNem sempre os _Final Reports_ apresentam todos os campos necessários, para fazer\na edição é necessário então ter acesso ao projeto original da genotipagem, e\nfazer uma nova edição para gerar os arquivos no Genome Studio da Illumina. Isso\nem cenários reais pode variar bastante entre empresas e projetos.\n:::\n\n### Arquivo de Mapa\n\nÉ no arquivo de Mapas que encontramos as informações de identificação e da posição\nfísica de cada SNP no genoma. \n\n| Campo | Descrição |\n|:-------|:-----------|\n|Name| Identificador do SNP|\n|Chr| Cromossomo|\n|Position| Posição no genoma em pares de base|\n|GenTrain Score| Métrica de qualidade do cluster de SNP. É o escore do SNP no algoritmo de clusterização GenTrain|\n\n: Arquivo de Mapa {.striped .hover}\n\nAbaixo você pode ver algumas linhas iniciais do arquivo de mapas que utilizaremos.\nEm um arquivo de mapas, cada SNP ocupa uma linha do arquivo.\n\n```\nName\tChr\tPosition\tGenTrain Score\n10080_COIII\t0\t0\t0.7310036\n10668_COIII\t0\t0\t0.7387226\n12187_ND4\t0\t0\t0.7660004\n15466_CYTB_MT\t0\t0\t0.799299\n16262_ND6\t0\t0\t0.8815182\n16370_ND6\t0\t0\t0.8978758\n5831_ND2_MT\t0\t0\t0.7440125\n8472_COXII_MT\t0\t0\t0.7310036\nGga_rs10721746\t23\t5869156\t0.873894\nGga_rs10721817\t1\t107404689\t0.8605233 \n\n```\n\n\n## Fazendo a leitura dos genótipos com o `snpStats`\n\n> **O nosso objetivo é fazer a leitura dos _Final Reports_ para cada indivíduo e\norganizá-los em um único arquivo de genótipo para futuras análises.**\n\n## `snpStats`\n\nPara esta prática vamos precisar dos pacotes `BiocManager` e `snpStats`. Você\npode fazer a instalação rodando o código abaixo:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"snpStats\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\nApós a instalação podemos então carregar os pacotes necessários:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(snpStats)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\n\n\n\n\n\nDe maneira geral, **em um arquivo de genótipos cada linha deve representar um indivíduo**\ne conter além de **sua identificação**, as **colunas contendo os genótipos para cada SNP**.\nA depender do software utilizado para as análises genômicas, a configuração do\narquivo de genótipo pode envolver mais campos e a codificação dos genótipos\ntambém pode variar.\n\nNesta prática, vamos construir o arquivo de genótipos em três passos:\n\n1. Criar uma lista com os nomes de todos os _Final Reports_ pra leitura.\n\n2. Criar vetores que contenham o ID dos Animais e o ID dos SNPs.\n\n3. Usar o pacote `snpStats` para gerar o arquivo de genótipos.\n\n### Criando a lista de _Final Reports_\n\nOs arquivos para esta prática estão na pasta `data/01_snpStats`. Vamos usar a\nfunção `list.files` para gerar nossa lista de arquivos a serem lidos.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilenames <- list.files(path = \"data/01_snpStats/\",\n           pattern = \"Final_Report_.*.txt\",\n           full.names = TRUE)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n### Criando os vetores de ID dos SNPs\n\nAqui é bem simples, faremos a leitura do arquivo de mapas e vamos extrair a\nprimeira coluna que é a de ID dos SNPs.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnpids <- read.table(\"data/01_snpStats/SNP-Table-Chickens50k.txt\",\n                     sep = \"\\t\",\n                     header = TRUE) |>\n          pull(Name)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n### Criando os vetores de ID dos Animais\n\nAqui vamos utilizar a função `map` do pacote `purrr` para iterar sobre todos os\nnossos _Final Reports_ e capturar somente a informação de ID dos animais.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimids<- filenames |>  # <1>\n            map(\\(x){ # <2>\n              scan(x,skip=11,nlines=1,sep=\"\\t\",what=\"character\")[2] # <3>\n            }) |>\n            reduce(c)# <4>\n```\n:::\n\n\n\n\n\n\n\n\n\n\n1. Passamos nosso vetor de `filenames` para a funçào `map`\n\n2. `(\\x){}`: este trecho cria uma **função anônima** dentro do map. Isso faz com\nque a cada rodada da iteração `x` seja substituído pelo valor correspondente no\nna nossa lista de arquivos e as operações entre `{}` sejam executadas.\n\n3. Aqui usamos a função `scan` para ler o arquivo:\n  + `x` : é o arquivo atual na lista de arquivos passadas para o map\n  + `skip`: é utilizado para pular as 11 linhas iniciais do arquivo, [lembram delas?](#explorando-um-final-report)\n  + `nlines`: informamos que só queremos ler 1 linha do arquivo\n  + `[2]`: nosso arquivo possui 5 colunas, com a notação de colchetes estamos\n  extraindo o valor da segunda coluna que contém o ID do animal\n\n4. `reduce(c)`: como a função map retorna uma lista de ids, aqui usamos `reduce`\npara transformar a lista em um vetor com a função `c()` de concatenação\n\nAgora já temos tudo que precisamos para gerar o arquivo de genótipos!\n\n### Gerando o arquivo de genótipos\n\nA função `read.snps.long` é a responsável por receber o vetor de _Final Reports_,\nfazer a leitura e organizar o nosso arquivo de genótipos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenodat<-read.snps.long(file=filenames, #<1>\n                        sample.id=animids, #<2>\n                        snp.id=snpids, #<3>\n                        diploid=NULL, \n                        fields=c(sample=2,snp=1,allele1=3,allele2=4,confidence=5),  #<4>\n                        codes=c(\"A\",\"B\"), #<5>\n                        threshold=0.5, #<6>\n                        lower=TRUE, \n                        skip=11, #<7>\n                        sep=\"\\t\",\n                        verbose=TRUE, \n                        in.order=FALSE,\n                        every=10000)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n1. Informamos o vetor de `filenames`\n\n2. O vetor de ID dos animais `animids`\n\n3. O vetor de ID dos SNPs `snpids`\n\n4. Aqui informamos pra função em quais colunas do _Final Report_ ela vai encontrar \nas informações referentes a amostra (_sample_), SNP, alelos ( _allele1_ e _allele2_ )\ne o GC Score (_confidence_).\n\n5. Aqui informados de que maneira os genótipos estão codificados no _Final Report_.\n\n6. Definimos o valor mínimo de qualidade por amostra (_GC Score_)\n\n7. Ignoramos as 11 primeiras linhas do _Final Report_\n\n\n```\nReading one call per input line #<1>\n   Sample id is in field 2 #<1>\n   SNP id is in field 1 #<1>\n   Allele 1 is in field 3 #<1>\n   Allele 2 is in field 4 #<1>\n   Confidence score is in field 5 #<1>\nReading SnpMatrix with 20 rows and 57636 columns #<2>\n                             Cumulative totals\n                    -----------------------------------\n    File     Line   Accepted Rejected  No call  Skipped    File name\n      20    57647    1100749    51957       14      220    ..._Report_Chk_9.txt\n1100749 genotypes successfully read #<3>\n51957 genotypes were rejected due to low confidence #<3>\n14 genotypes were not called #<3>\nWarning message: #<4>\nIn read.snps.long(file = filenames, sample.id = animids, snp.id = snpids,  :\n  220 lines of input file(s) were skipped\n  \n```\n\n1. Nos informa quais colunas foram utilizadas para leitura\n\n2. Nos diz quantas linhas e colunas o arquivo de gentótipo possui na primeira\npassagem.\n\n3. Exibe estatísticas da leitura, como o número de genótipos lidos e rejeitados.\n\n4. Nos informa o total de linhas que foram ignoradas na leitura.\n\n### Explorando o objeto de genótipos `genodat`\n\nQuantos indivíduos e marcadores temos?\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(genodat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    20 57636\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nO que encontramos nas linhas?\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(genodat) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"203900190022_R01C01\" \"203900190022_R05C02\" \"203900190022_R06C01\"\n[4] \"203900190022_R06C02\" \"203900190025_R01C01\" \"203900190025_R01C02\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nE nas colunas?\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(genodat) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10080_COIII\"   \"10668_COIII\"   \"12187_ND4\"     \"15466_CYTB_MT\"\n[5] \"16262_ND6\"     \"16370_ND6\"    \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Salvando o arquivo de genótipos\n\nPodemos agora salvar o nosso arquivo de genótipo para utilizar em análises\ndaqui pra frente. Podemos salvá-lo tanto em formato de texto quanto no formato\n`Rdata`, um formato específico do R e otimizado para salvar objetos que podem\nser recuperados facilmente em qualquer sessão do R.\n\n::: {.callout-tip}\n# Lembrete!\n\nLembre que se você não especificar o caminho o arquivo será salvo na sua pasta\nraiz do projeto, aquela pasta que contém o .Rproj. Se desejar salvar em algum\noutro subdiretório basta informar o caminho no momento de salvar o arquivo.\n\nNos exemplos abaixo estamos salvando na subpasta `data/01_snpStats`\n:::\n\n### Salvando .Rdata\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(genodat,file=\"data/01_snpStats/genodat.Rdata\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n### Salvando em formato SNPMatrix\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampleIDs<-sprintf('%-20s',rownames(genodat)) #<1>\nrownames(genodat)<-sampleIDs  #<2>  \nwrite.SnpMatrix(genodat, #<3>\n                file=\"data/01_snpStats/genodat.txt\",\n                quote=F,\n                row.names=T,\n                col.names=F,\n                na=5,\n                sep=\"\") \n```\n:::\n\n\n\n\n\n\n\n\n\n\n1. Aqui usamos a função `sprintf` para formatar nossos nomes de IDs para que todos\ntenham 20 caracteres de comprimento.\n\n2. Então atualizamos os nomes das linhas do nosso arquivo `genodat` com os IDs formatados.\n\n3. Por fim, salvamos o nosso arquivo em formato SNPMatrix. Observem que neste formato\nnossas colunas de genótipo não possuem separação entre elas. `sep=\"\"`.\n\n### Explorando nosso arquivo `genodat.txt`\n\nE essa é a cara do nosso arquivo de genótipos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n203900190022_R01C01 222522022120152111112111101100 ...\n203900190022_R05C02 222522022101051222222111201120 ...\n203900190022_R06C01 222522022111051212112111022200 ...\n203900190022_R06C02 222522022220052221212021112210 ...\n203900190025_R01C01 222522021021150221122201112110 ...\n203900190025_R01C02 020500002020150211122000202110 ...\n203900190025_R02C01 222522022112150211122000102110 ...\n203900190025_R02C02 222522021121150200122002112210 ...\n203900190025_R03C01 222522022021150200022100112000 ...\n203900190025_R03C02 222522022221150221122000111110 ...\n\n```\n\nNeste formato os genótipos estão representados na forma de **dosagem de alelos**. \n\n::: {.grid}\n::: {.g-col-3}\n\n| Genótipo  | Código  |\n|--------|--------|\n| AA  | 2   |\n| AB   | 1   |\n| BB | 0   |\n|Missing| 5|\n\n:::\n:::\n\n## Código Completo\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalando os pacotes necessários\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"snpStats\")\n\n# Carregando pacotes\n\nlibrary(snpStats)\nlibrary(tidyverse)\nlibrary(data.table)\n\n# Gerando vetor de Final Reports\n\nfilenames <- list.files(path = \"data/01_snpStats/\",\n           pattern = \"Final_Report_.*.txt\",\n           full.names = TRUE)\n\n# Gerando vetor de SNP ids\n\nsnpids <- read.table(\"data/01_snpStats/SNP-Table-Chickens50k.txt\",\n                     sep = \"\\t\",\n                     header = TRUE) |>\n          pull(Name)\n\n# Gerando vetor de Animal ids\n\nanimids<- filenames |>\n            map(\\(x){ \n              scan(x,skip=11,nlines=1,sep=\"\\t\",what=\"character\")[2]\n            }) |>\n            reduce(c)\n\n# Criando o arquivo de genótipo\n\ngenodat<-read.snps.long(file=filenames,\n                        sample.id=animids,\n                        snp.id=snpids, \n                        diploid=NULL, \n                        fields=c(sample=2,snp=1,allele1=3,allele2=4,confidence=5),\n                        codes=c(\"A\",\"B\"),\n                        threshold=0.5,\n                        lower=TRUE, \n                        skip=11,\n                        sep=\"\\t\",\n                        verbose=TRUE, \n                        in.order=FALSE,\n                        every=10000)\n\n# Salvando em formato Rdata\n\nsave(genodat,file=\"data/01_snpStats/genodat.Rdata\")\n\n\n# Salvando em formato SNPMatrix\n\nsampleIDs<-sprintf('%-20s',rownames(genodat))\nrownames(genodat)<-sampleIDs  \nwrite.SnpMatrix(genodat, \n                file=\"data/01_snpStats/genodat.txt\",\n                quote=F,\n                row.names=T,\n                col.names=F,\n                na=5,\n                sep=\"\")\n```\n:::\n",
    "supporting": [
      "1_snpStats_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}